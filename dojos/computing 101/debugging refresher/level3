# challenge: level3

üìÖ 2025-08-29
üìÅ debugging refresher

---

## ‚úÖ what i did  
1st WAY:
-clicked start
-opened the terminal
-ran: '/challenge/embryogdb_level3'
-(gdb): r
-(gbd): c
-(gdb): x/10gx $rsp
-copied one random value
-(gdb): c
-(gdb): pasted the value
-wrong answer but at least now i knew which one im was supposed to copy (the 6th q-word in the stack)
-(gdb): r
-(gdb): c
-(gdb): x/gx $rsp+40
-copied the value
-(gdb): c
-pasted the value
-flag popped out

2nd WAY (canon):
-clicked start
-opened the terminal
-ran: '/challenge/embryogdb_level3'
-(gdb): set disassembly-flavor intel
-(gdb): r
-(gdb): c
-(gdb): disassemble main
-typed c
-found the read syscall -> the data has been red from the second argument loaded in rsi -> rax copied rsi and rax has been set as the local variable from rbp-0x18
-(gdb): x/gx $rbp-0x18
-copied the value
-(gdb): c
-pasted the value
-flag popped out

## üßëüèæ‚Äçüè´ what this challenge teaches u
how to dump memory locations in gdb using x/ and specify quantity, unit and format
the formula is: x/[n][u][f] [address]
-n -> number of bytes
-u -> unit size. b=byte h=word w=double-word g=quad-word
-f -> format. d=dec x=hex s=string i=instruction
-address -> address memory to be dumped. it can be as register ($reg) or an absolute address

to switch from AT&T syntax to intel u can do set disassembly-flavor intel
also how to disassemble main and understand how it works checking the code line by line 
rbp register is crucial for memory allocation when variable r created inside a function

## üèÅ Flag  
pwn.college{Qj3bGmNLcLATUJoHVZvxPHIhSTe.dZDNywCO4IDOxEzW}
