# challenge: dynamic response

üìÖ 2025-09-21
üìÅ building a web server

---

## ‚úÖ what i did  
-clicked start
-opened the terminal
-ran: 'vim bro.s'
-typed: '.intel_syntax noprefix'
        '.global _start'
        '.data'
        'data:   .ascii  "HTTP/1.0 200 OK\r\n\r\n"'
        'data_len= . - data'
        'msg:    .skip   256'
        'content:        .skip   256'
        'space:  .ascii  " "'
        '.text'
        '_start:'
        '#SOCKET'
        'mov rax, 41'
        'mov rdi, 2'
        'mov rsi, 1'
        'mov rdx, 0'
        'syscall'
        'mov r8, rax'
        '#BIND'
        'mov rax, 49'
        'mov rdi, r8'
        'sub rsp, 16'
        'mov rsi, 0x2'
        'mov [rsp], si'
        'mov rsi, 0x5000'
        'mov [rsp+2], si'
        'mov rsi, 0x0'
        'mov [rsp+4], si'
        'mov [rsp+8], si'
        'mov rsi, rsp'
        'mov rdx, 16'
        'syscall'
        '#LISTEN'
        'mov rax, 50'
        'mov rdi, r8'
        'mov rsi, 0'
        'syscall'
        '#ACCEPT'
        'mov rax, 43'
        'mov rdi, r8'
        'mov rsi, 0'
        'mov rdx, 0'
        'syscall'
        'mov r9, rax'
        '#READ'
        'mov rax, 0'
        'mov rdi, r9'
        'lea rsi, msg'
        'mov rdx, 256'
        'syscall'
        'mov r10, rax'
        '#OPEN'
        'mov rax, 2'
        'lea rdi, space'
        'mov dil, [rdi]'
        'lea rdx, msg'
        'check:'
        'mov bl, [rdx]'
        'cmp dil, bl'
        'je entry'
        'inc rdx'
        'jmp check'
        'entry:'
        'inc rdx'
        'push rdx'
        'entryy:'
        'inc rdx'
        'terminatore:'
        'mov bl, [rdx]'
        'cmp dil, bl'
        'jne entryy'
        'mov rdi, 0x0'
        'mov [rdx], dil'
        'pop rdi'
        'mov rsi, 0'
        'syscall'
        'mov r10, rax'
        '#READ'
        'mov rax, 0'
        'mov rdi, r10'
        'lea rsi, content'
        'mov rdx, 256'
        'syscall'
        'push rax'
        '#CLOSE'
        'mov rax, 3'
        'mov rdi, r10'
        'syscall'
        '#WRITE'
        'mov rax, 1'
        'mov rdi, r9'
        'lea rsi, data'
        'mov rdx, data_len'
        'syscall'
        '#WRITE'
        'mov rax, 1'
        'mov rdi, r9'
        'lea rsi, content'
        'pop rdx'
        'syscall'
        '#CLOSE'
        'mov rax, 3'
        'mov rdi, r9'
        'syscall'
        '#EXIT'
        'mov rax, 60'
        'mov rdi, 0'
        'syscall'
-ran: 'as -o bro.o bro.s'
-ran: 'ld -o bro bro.o'
-ran: '/challenge/run bro'
-flag popped out

## üßëüèæ‚Äçüè´ what this challenge teaches u
the key difference between static response and dynamic response is parsing
in the static response, the server reply everytime w/ the same content aside from the client request
in the dynamic response, the server reply based on client's requests
to understand the client's requests u must parse it. it means to extract only a crucial part of the entire request
to achieve this first u need to save the request in a variable and then open the needed file (url)
to open the file the client is asking for u have to extract it correctly: started from the first byte until i find the first space
once find it, the very next address is the first address of the file im supposed to open.
then in the second space im supposed to put \0 because it ends the file's name so the open syscall can open the file correctly
once open it, read it. the return value of the read syscall tell u how many bytes has been read.
that value is crucial because allows u to write the correct number of bytes when u send the content asked for to the client
challenge very usefull to understand deeply open, read and write syscalls. also declare variable to store buffer

## üèÅ Flag
pwn.college{8Dkt0QCCqp1D2ou3AFxaCNw2zL4.QX2QzMzwCO4IDOxEzW}
