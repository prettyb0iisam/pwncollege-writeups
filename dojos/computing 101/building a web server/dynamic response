# challenge: dynamic response

üìÖ 2025-09-21
üìÅ building a web server

---

## ‚úÖ what i did  
-clicked start
-opened the terminal
-ran: 'vim bro.s'
-typed: '.intel_syntax noprefix'
        '.global _start'
        '.data'
        'data:  .ascii  "HTTP/1.0 200 OK\r\n\r\n"'
        'data_len= . - data'
        'msg:   .skip  256'
        'content:  .skip  256'
        '.text'
        '_start:'
        'mov rax, 41'
        'mov rdi, 2'
        'mov rsi, 1'
        'mov rdx, 0'
        'syscall          #socket'
        'mov r10, rax'
        'sub rsp, 16'
        'mov r11, 0x2'
        'mov [rsp], r11w'
        'mov r11, 0x5000'
        'mov [rsp+2], r11w'
        'mov r11, 0x00000000'
        'mov [rsp+4], r11d'
        'mov r11, 0'
        'mov [rsp+8], r11d'
        'mov rax, 49'
        'mov rdi, r10'
        'mov rsi, rsp'
        'mov rdx, 16'
        'syscall            #bind'
        'mov rax, 50'
        'mov rdi, r10'
        'mov rsi, 0'
        'syscall            #listen'
        'mov rax, 43'
        'mov rdi, r10'
        'mov rsi, 0'
        'mov rdx, 0'
        'syscall            #accept'
        'mov r12, rax'
        'mov rax, 0'
        'mov rdi, r12'
        'lea rsi, msg'
        'mov rdx, 256'
        'syscall            #read'
        'mov rax, 2'
        'lea rcx, msg'
        'add rcx, 4'
        'mov rbx, 0x0'
        'mov [rcx+16], rbx'
i found out in this challenge the url is always 16bytes
        'mov rdi, rcx'
        'mov rsi, 0'
        'syscall            #open'
        'mov r13, rax'
        'mov rax, 0'
        'mov rdi, r13'
        'lea rsi, content'
        'mov rdx, 256'
        'syscall            #read'
        'mov r14, rax'
        'mov rax, 3'
        'mov rdi, r13'
        'syscall            #close'
        'mov rax, 1'
        'mov rdi, r12'
        'lea rsi, data'
        'mov rdx, data_len'
        'syscall            #write'
        'mov rax, 1'
        'mov rdi, r12'
        'lea rsi, content'
        'mov rdx, r14'
        'syscall            #write'
        'mov rax, 3'
        'mov rdi, r12'
        'syscall            #close'
        'mov rax, 60'
        'mov rdi, 0'
        'syscall            #exit'
-ran: 'as -o bro.o bro.s'
-ran: 'ld -o bro bro.o'
-ran: '/challenge/run bro'
-flag popped out

## üßëüèæ‚Äçüè´ what this challenge teaches u
the key difference between static response and dynamic response is parsing
in the static response, the server reply everytime w/ the same content aside from the client request
in the dynamic response, the server reply based on the client's requests
to understand the client's requests u must parse it. it means to extract only a crucial part of the entire request
to achieve this first u need to save the request in a variable and then open the needed file (url)
once open it, read it. the return value of the read syscall tell u how many bytes has been red.
that value is crucial because allows u to write the correct number of bytes when u send the content asked for to the client
in this case we r lucky cuz the url is always 16bytes. if it wasnt, we should have count the number of bytes and stop after founding out a space
challenge very usefull to understand deeply open, read and write syscalls. also declare variable to store buffer

## üèÅ Flag
pwn.college{8Dkt0QCCqp1D2ou3AFxaCNw2zL4.QX2QzMzwCO4IDOxEzW}
