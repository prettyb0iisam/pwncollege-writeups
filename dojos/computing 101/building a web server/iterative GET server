# challenge: iterative GET server

üìÖ 2025-09-21
üìÅ building a web server

---

## ‚úÖ what i did  
-clicked start
-opened the terminal
-ran: 'vim bro.s'
-typed: '.intel_syntax noprefix'
        '.global _start'
        '.data'
        'data:   .ascii  "HTTP/1.0 200 OK\r\n\r\n"'
        'data_len= . - data'
        'msg:    .skip   256'
        'content:        .skip   256'
        'space:  .ascii  " "'
        '.text'
        '_start:'
        '#SOCKET'
        'mov rax, 41'
        'mov rdi, 2'
        'mov rsi, 1'
        'mov rdx, 0'
        'syscall'
        'mov r8, rax'
        '#BIND'
        'mov rax, 49'
        'mov rdi, r8'
        'sub rsp, 16'
        'mov rsi, 0x2'
        'mov [rsp], si'
        'mov rsi, 0x5000'
        'mov [rsp+2], si'
        'mov rsi, 0x0'
        'mov [rsp+4], si'
        'mov [rsp+8], si'
        'mov rsi, rsp'
        'mov rdx, 16'
        'syscall'
        '#LISTEN'
        'mov rax, 50'
        'mov rdi, r8'
        'mov rsi, 0'
        'syscall'
        'LOOP'
        '#ACCEPT'
        'mov rax, 43'
        'mov rdi, r8'
        'mov rsi, 0'
        'mov rdx, 0'
        'syscall'
        'mov r9, rax'
        '#READ'
        'mov rax, 0'
        'mov rdi, r9'
        'lea rsi, msg'
        'mov rdx, 256'
        'syscall'
        'mov r10, rax'
        '#OPEN'
        'mov rax, 2'
        'lea rdi, space'
        'mov dil, [rdi]'
        'lea rdx, msg'
        'check:'
        'mov bl, [rdx]'
        'cmp dil, bl'
        'je entry'
        'inc rdx'
        'jmp check'
        'entry:'
        'inc rdx'
        'push rdx'
        'entryy:'
        'inc rdx'
        'terminatore:'
        'mov bl, [rdx]'
        'cmp dil, bl'
        'jne entryy'
        'mov rdi, 0x0'
        'mov [rdx], dil'
        'pop rdi'
        'mov rsi, 0'
        'syscall'
        'mov r10, rax'
        '#READ'
        'mov rax, 0'
        'mov rdi, r10'
        'lea rsi, content'
        'mov rdx, 256'
        'syscall'
        'push rax'
        '#CLOSE'
        'mov rax, 3'
        'mov rdi, r10'
        'syscall'
        '#WRITE'
        'mov rax, 1'
        'mov rdi, r9'
        'lea rsi, data'
        'mov rdx, data_len'
        'syscall'
        '#WRITE'
        'mov rax, 1'
        'mov rdi, r9'
        'lea rsi, content'
        'pop rdx'
        'syscall'
        '#CLOSE'
        'mov rax, 3'
        'mov rdi, r9'
        'syscall'
        'jmp LOOP'
-ran: 'as -o bro.o bro.s'
-ran: 'ld -o bro bro.o'
-ran: '/challenge/run bro'
-flag popped out

## üßëüèæ‚Äçüè´ what this challenge teaches u
to make the server capable of accepting multiple request u just need to loop the sequence: accept-read-open-read-close-write-write-close

## üèÅ Flag 
pwn.college{MxeknFtWpi5CDKmqvBHxSqjSSne.QX3QzMzwCO4IDOxEzW}
