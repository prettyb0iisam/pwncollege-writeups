# challenge: concurrent POST server

рџ“… 2025-09-21
рџ“Ѓ building a web server

---

## вњ… what i did  
-clicked start
-opened the terminal
-ran: 'vim bro.s'
-typed: '.intel_syntax noprefix'
        '.global _start'
        '.data'
        'data:   .ascii  "HTTP/1.0 200 OK\r\n\r\n"'
        'data_len= . - data'
        'msg:    .skip   1024'
        'space:  .ascii  " "'
        'new_line:       .ascii  "\r\n\r\n"'
        '.text'
        '_start:'
        '#SOCKET'
        'mov rax, 41'
        'mov rdi, 2'
        'mov rsi, 1'
        'mov rdx, 0'
        'syscall'
        'mov r8, rax'
        '#BIND'
        'mov rax, 49'
        'mov rdi, r8'
        'sub rsp, 16'
        'mov rsi, 0x2'
        'mov [rsp], si'
        'mov rsi, 0x5000'
        'mov [rsp+2], si'
        'mov rsi, 0x0'
        'mov [rsp+4], si'
        'mov [rsp+8], si'
        'mov rsi, rsp'
        'mov rdx, 16'
        'syscall'
        '#LISTEN'
        'mov rax, 50'
        'mov rdi, r8'
        'mov rsi, 0'
        'syscall'
        'LOOP:'
        '#ACCEPT'
        'mov rax, 43'
        'mov rdi, r8'
        'mov rsi, 0'
        'mov rdx, 0'
        'syscall'
        'mov r9, rax'
        '#FORK'
        'mov rax, 57'
        'syscall'
        'cmp rax, 0'
        'je CHILD'
        'jmp PARENT'
        'PARENT:'
        '#CLOSE'
        'mov rax, 3'
        'mov rdi, r9'
        'syscall'
        'jmp LOOP'
        'CHILD:'
        '#CLOSE'
        'mov rax, 3'
        'mov rdi, r8'
        'syscall'
        '#READ'
        'mov rax, 0'
        'mov rdi, r9'
        'lea rsi, msg'
        'mov rdx, 1024'
        'syscall'
        'push rax'
        '#OPEN'
        'mov rax, 2'
        'lea rdi, space'
        'mov dil, [rdi]'
        'lea rdx, msg'
        'check:'
        'mov bl, [rdx]'
        'cmp dil, bl'
        'je entry'
        'inc rdx'
        'jmp check'
        'entry:'
        'inc rdx'
        'push rdx'
        'entryy:'
        'inc rdx'
        'terminatore:'
        'mov bl, [rdx]'
        'cmp dil, bl'
        'jne entryy'
        'mov rdi, 0x0'
        'mov [rdx], dil'
        'pop rdi'
        'mov rsi, 0x41'
        'mov rdx, 0777'
        'syscall'
        'mov r10, rax'
        '#WRITE'
        'mov rax, 1'
        'mov rdi, r10'
        'lea rsi, msg'
        'find:'
        'lea rcx, new_line'
        'xor r11, r11'
        'mov al, [rcx]'
        'findd:'
        'mov bl, [rsi]'
        'cmp al, bl'
        'je next_value'
        'inc rsi'
        'jmp findd'
        'next_value:'
        'cmp r11, 3'
        'je finish'
        'inc rsi'
        'inc rcx'
        'mov al, [rcx]'
        'mov bl, [rsi]'
        'cmp al, bl'
        'jne find'
        'inc r11'
        'jmp next_value'
        'finish:'
        'inc rsi'
        'lea rdx, msg'
        'pop r11'
        'push rsi'
        'sub rsi, rdx'
        'sub r11, rsi'
        'mov rdx, r11'
        'pop rsi'
        'mov rax, 1'
        'syscall'
        '#CLOSE'
        'mov rax, 3'
        'mov rdi, r10'
        'syscall'
        '#WRITE'
        'mov rax, 1'
        'mov rdi, r9'
        'lea rsi, data'
        'mov rdx, data_len'
        'syscall'
        '#EXIT'
        'mov rax, 60'
        'mov rdi, 0'
        'syscall'
        'jmp LOOP'
-ran: 'as -o bro.o bro.s'
-ran: 'ld -o bro bro.o'
-ran: '/challenge/run bro'
-flag popped out

## рџ§‘рџЏѕвЂЌрџЏ« what this challenge teaches u
how to handle POST requests and parse the full request
the POST request contain: REQUEST (the file needed), HEADER (client's details) and BODY (content the client is sending to the server)
its crucial to parse correctly the full request to extract the file needed and body's content
a good way can be saving the full request in a variable and then use a register as a pointer to go directly to the byte needed
then figure out how many bytes the write syscall must print
in this case my code obtain successfully the flag only when the Content-Lenght is 3digits. 
it fails when its only 2digits because it fail to write the very first byte of body's content.
so yeah, just for one byte sometimes it fails 
in this case the write syscall takes as second argument O_WRONLY|O_CREAT it means write only or create the file. 
O_RDONLY = 0
O_WRONLY = 1
O_RDWR = 2
O_CREAT = 64
O_WRONLY|O_CREAT = 65 (dec) = 0x41 (hex)
the third argument handle the permissions of the file that has been created (0_CREATE) -> rwxrwxrwx=0777
to extract the post's content-lenght i've subtracted the result of read syscall with 0xb7 (183 dec)
write syscall start from msg+0xb7
if post'content-lenght is 2digits, it would be supposed to start from msg+0xb6
i need to find out a way to implement this check -> i was thinking to check the byte at msg+0xb7
if its \n -> 3 digits -> works fine
if its C -> 2 digits -> start at msg+0xb6 
  
## рџЏЃ Flag
pwn.college{oGIYVtSJabHppIOGyQTZeDIQfdQ.QX5QzMzwCO4IDOxEzW}
